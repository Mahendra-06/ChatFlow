
import React, { useState, useEffect, useRef, useCallback } from "react";
import { ChatRoom as ChatRoomEntity } from "@/entities/ChatRoom";
import { Message } from "@/entities/Message";
import { User } from "@/entities/User";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { ArrowLeft, Users, Hash, Send } from "lucide-react";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";

import MessageList from "../components/chat/MessageList";
import MessageInput from "../components/chat/MessageInput";
import UserList from "../components/chat/UserList";

export default function ChatRoom() {
  const navigate = useNavigate();
  const [room, setRoom] = useState(null);
  const [messages, setMessages] = useState([]);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showUserList, setShowUserList] = useState(false);
  const intervalRef = useRef(null);

  // Get room ID from URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const roomId = urlParams.get('room');

  const loadMessages = useCallback(async () => {
    if (!roomId) return;
    
    const allMessages = await Message.list("-created_date", 100);
    const roomMessages = allMessages
      .filter(msg => msg.chat_room_id === roomId)
      .reverse(); // Show oldest first
    
    setMessages(roomMessages);
  }, [roomId]);

  const initializeChatRoom = useCallback(async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);

      // Load room details
      const rooms = await ChatRoomEntity.list();
      const currentRoom = rooms.find(r => r.id === roomId);
      
      if (!currentRoom) {
        navigate(createPageUrl("Dashboard"));
        return;
      }
      
      setRoom(currentRoom);
      await loadMessages();

      // Send join message
      await Message.create({
        content: `${currentUser.full_name || currentUser.email} joined the chat`,
        chat_room_id: roomId,
        sender_name: currentUser.full_name || currentUser.email,
        sender_email: currentUser.email,
        message_type: "join"
      });
      
    } catch (error) {
      console.log("User not authenticated");
      await User.login();
    }
    setIsLoading(false);
  }, [roomId, navigate, loadMessages]); // Added loadMessages to dependencies

  useEffect(() => {
    if (!roomId) {
      navigate(createPageUrl("Dashboard"));
      return;
    }

    initializeChatRoom();
    
    // Set up real-time message polling
    intervalRef.current = setInterval(loadMessages, 2000);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [roomId, navigate, initializeChatRoom, loadMessages]); // Added initializeChatRoom and loadMessages

  const handleSendMessage = async (content) => {
    if (!content.trim() || !user || !roomId) return;

    await Message.create({
      content: content.trim(),
      chat_room_id: roomId,
      sender_name: user.full_name || user.email,
      sender_email: user.email,
      message_type: "text"
    });

    // Immediately refresh messages
    await loadMessages();
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!room) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-slate-700 mb-2">Room not found</h2>
          <Button onClick={() => navigate(createPageUrl("Dashboard"))}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Dashboard
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-slate-50">
      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white/80 backdrop-blur-sm border-b border-slate-200/60 px-6 py-4 flex items-center justify-between"
        >
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => navigate(createPageUrl("Dashboard"))}
              className="md:hidden"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div className="flex items-center gap-3">
              <div className={`w-10 h-10 bg-gradient-to-r ${
                room.color === 'blue' ? 'from-blue-400 to-blue-600' :
                room.color === 'purple' ? 'from-purple-400 to-purple-600' :
                room.color === 'green' ? 'from-green-400 to-green-600' :
                'from-orange-400 to-orange-600'
              } rounded-xl flex items-center justify-center shadow-lg`}>
                <Hash className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-slate-800">{room.name}</h1>
                <p className="text-sm text-slate-500">{room.description}</p>
              </div>
            </div>
          </div>
          <Button
            variant="outline"
            onClick={() => setShowUserList(!showUserList)}
            className="hidden md:flex items-center gap-2"
          >
            <Users className="w-4 h-4" />
            <span className="hidden lg:inline">Members</span>
          </Button>
        </motion.div>

        {/* Messages Area */}
        <div className="flex-1 flex overflow-hidden">
          <div className="flex-1 flex flex-col">
            <MessageList messages={messages} currentUser={user} />
            <MessageInput onSendMessage={handleSendMessage} />
          </div>
          
          {/* User List Sidebar */}
          <AnimatePresence>
            {showUserList && (
              <motion.div
                initial={{ width: 0, opacity: 0 }}
                animate={{ width: 300, opacity: 1 }}
                exit={{ width: 0, opacity: 0 }}
                className="hidden md:block border-l border-slate-200/60 bg-white/60 backdrop-blur-sm"
              >
                <UserList messages={messages} />
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}